#!/bin/bash

set -eEu

# shellcheck disable=SC1091
. './lib/colors.bash'

# Allows testing in a remote environment without affecting the current working branch

ON_EXIT_FN_STACK=()

on_exit() {
  # shellcheck disable=SC2181
  if [[ $? != 0 && -n "${EXIT_ERROR_MSG:-}" ]]; then
    err "$EXIT_ERROR_MSG"
  fi

  for fn in "${ON_EXIT_FN_STACK[@]}"; do
    "$fn" || :
  done
}

trap on_exit INT TERM EXIT
# trap on_exit SIGINT

err() {
  local -r color="${2-$RED}"
  echo -e "\n${color}ERROR> $*${NOCOLOR}\n" >&2
}

inf() {
  local -r color="${2-$LIGHTBLUE}"
  echo -e "\n${color}INFO> $*${NOCOLOR}\n"
}

infn() {
  local -r color="${2-$LIGHTBLUE}"
  echo -e -n "${color}INFO> $*${NOCOLOR}"
}

git_cur_branch() {
  git branch | grep '^\*\s' | sed 's/^.*\s\+//'
}

gen_test_branch_name() {
  echo "test_$(uuidgen | sed 's/-.*//')"
}

if [[ -f ./.env ]]; then
	set -o allexport
	# shellcheck disable=SC1091
	. ./.env
	set +o allexport
fi

readonly WORK_BRANCH="$(git_cur_branch)"
readonly TEST_BRANCH="$(gen_test_branch_name)"

start_test_server() {
  # start test server
  inf 'Starting Test server'
  EXIT_ERROR_MSG='Starting Test server. FAILED'
  ./scripts/aws-ec2 start "$AWS_EC2_INSTANCE_ID" --wait
  inf 'Starting Test server. DONE' "$GREEN" && unset EXIT_ERROR_MSG
}

# create & publish test branch
publish_test_branch() {
  local msg='Publishing Test branch'
  inf "$msg"
  EXIT_ERROR_MSG="${msg}. FAILED"

  git stash push --include-untracked --message "$TEST_BRANCH"
  # git stash branch "$TEST_BRANCH" 'stash@{1}'
  git checkout -b "$TEST_BRANCH"
  git stash apply
  git commit -a -m 'test: remote' || :
  git push "$PUBLIC_REPO_ORIGIN" "$TEST_BRANCH"
  inf "${msg}. DONE" "$GREEN" && unset EXIT_ERROR_MSG
}

# restore git local workspace
restore_local_workspace() {
  # only restore if necesary
  local msg='Restoring Local Workspace'
  inf "$msg"
  EXIT_ERROR_MSG="${msg}. FAILED"

  git checkout "$WORK_BRANCH"
  # only stash pop if stash exist
  local -r stash="$(git stash list | grep ": ${TEST_BRANCH}" | head -n 1 | sed 's/:.*//')"
  if [[ -n "$stash" ]]; then
    git stash pop --index "$stash"
  fi
  git branch -D "$TEST_BRANCH" || :
  git branch --remotes -d "${PUBLIC_REPO_ORIGIN}/${TEST_BRANCH}" || :
  inf "${msg}. DONE" "$GREEN" && unset EXIT_ERROR_MSG
}

# setup test server
run_tests_in_server () {
  local msg='Running test in remote server'
  inf "$msg"
  EXIT_ERROR_MSG="${msg}. FAILED"

  local -r clone_folder="${NAME}-$(uuidgen)"
  local test_server_ip=''
  test_server_ip="$(./scripts/aws-ec2 public-ip "$AWS_EC2_INSTANCE_ID")"
  readonly test_server_ip

  local -r env_name=".env-$(uuidgen)"
  local -r env_tmp_file="$(mktemp)"

  cat ./.env > "$env_tmp_file"

  if [[ -f ./.env.override.server ]]; then
    cat ./.env.override.server >> "$env_tmp_file"
  fi

  # shellcheck disable=SC2140
  scp -q "$env_tmp_file" "${TEST_SERVER_USER}@${test_server_ip}":~/"$env_name" # without APT_PROXY
  rm "$env_tmp_file"
  # shellcheck disable=2215,2087,SC2153
  ssh -T "${TEST_SERVER_USER}@${test_server_ip}" <<- SSHEOF
    set -eEu

    inf() {
      local -r color="\${2:-$LIGHTBLUE}"
      echo -e "\n${PURPLE}[TEST SERVER]${NOCOLOR} \${color}INFO> \$*${NOCOLOR}\n"
    }

    if [ ! -d "$TEST_SERVER_DIR" ]; then
      mkdir -p "$TEST_SERVER_DIR"
    fi

    cd "$TEST_SERVER_DIR"
    inf "Cloning git repository: ${PUBLIC_REPO}"
    git clone --origin "$PUBLIC_REPO_ORIGIN" "$PUBLIC_REPO" "$clone_folder"
    cd "./${clone_folder}"
    inf "Cloning git repository. DONE" "$GREEN"

    on_exit() {
      sudo rm -r "${TEST_SERVER_DIR}/${clone_folder}"
      inf "Directory ${TEST_SERVER_DIR}/${clone_folder} removed" "$GREEN"
    }
    trap on_exit EXIT

    inf "Pulling test branch"
    git fetch "$PUBLIC_REPO_ORIGIN"
    git checkout -b "$TEST_BRANCH"
    git pull github "$TEST_BRANCH"
    inf "Pulling test branch. DONE" "$GREEN"

    mv ~/"$env_name" ./.env
    time bash ./run "$@"
SSHEOF
  inf "${msg}. DONE" "$GREEN" && unset EXIT_ERROR_MSG
}

delete_public_test_branch_onexit() {
  local msg="Deleting public test branch on ${PUBLIC_REPO_ORIGIN}"
  inf "$msg"

  if git push "$PUBLIC_REPO_ORIGIN" --delete "$TEST_BRANCH"; then
    inf "${msg}. DONE" "$GREEN"
  else
    err "${msg}. FAILED"
  fi

}

suggest_stop_instance_onexit() {
  # suggest stop the instance
  inf "IMPORTANT: Stop ec2 instance with the command below:" "$LIGHTRED"
  echo -e "${NOCOLOR}\$ ./scripts/aws-ec2 stop ${AWS_EC2_INSTANCE_ID}"
}

stop_instance_onexit() {
  # suggest stop the instance
  inf "Stopping ec2 instance ${AWS_EC2_INSTANCE_ID}"
  if ./scripts/aws-ec2 stop "$AWS_EC2_INSTANCE_ID" ; then
    inf "Stopping ec2 instance ${AWS_EC2_INSTANCE_ID}. DONE" "$GREEN"
  else
    err "Stopping ec2 instance ${AWS_EC2_INSTANCE_ID}. FAIL"
  fi
}

done_msg_onexit() {
  inf 'Work done, :)' "$GREEN"
}

main() {
  start_test_server

  if [[ -n "${TEST_SERVER_STOP}" && "${TEST_SERVER_STOP}" == true ]]; then
    ON_EXIT_FN_STACK+=(stop_instance_onexit)
  else
    ON_EXIT_FN_STACK+=(suggest_stop_instance_onexit)
  fi

  ON_EXIT_FN_STACK=(restore_local_workspace "${ON_EXIT_FN_STACK[@]}")
  publish_test_branch
  ON_EXIT_FN_STACK=(delete_public_test_branch_onexit "${ON_EXIT_FN_STACK[@]}")

  run_tests_in_server "$@"
  ON_EXIT_FN_STACK+=(done_msg_onexit)
}

main "$@"
