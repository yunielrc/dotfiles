#!/usr/bin/env bash

if [ "$FLOCKER" != "$0" ]; then
  exec env FLOCKER="$0" flock -E 3 -en "$0" "$0" "$@" || :
fi

# Bootstrap a configuration management available in cm folder

readonly BASE_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly WORK_DIR="${WORK_DIR:-"$BASE_PATH"}"

. "${BASE_PATH}/.dotfilesrc"

readonly SCRIPT_NAME="$(basename "${0}")"
readonly CM_PATH="${WORK_DIR}/cm"

readonly INCLUDE_BASE_CM="${INCLUDE_BASE_CM:-true}"

usage(){

  cat <<HELPMSG
  Usage:
  ${SCRIPT_NAME} <cm>

  Bootstrap a configuration management available in cm folder

  Options:
    -h, --help          Show this help

  Examples:
  ${SCRIPT_NAME} desktop
~
HELPMSG
}

on_exit() {
  :
}

setup_cm() {
  local -r cm="${CM_PATH}/${1:-}.bash"

  if [[ ! -f "$cm" ]]; then
     err "Configuration management '${cm}' doesn't exists"
     usage
     return 1
  fi
  echo -e "${WHITE}# Setting cm ${NOCOLOR}${LIGHTPURPLE}${1}${NOCOLOR}\n"
  bash "$cm"
  echo
}

load_base_cm(){
  if [[ -n "${DOTF_BASE_CM:-}" && "${#DOTF_BASE_CM[@]}" -gt 0 ]]; then
    for cm in "${DOTF_BASE_CM[@]}"; do
      setup_cm "$cm"
    done
  fi
}

main() {
  if [[ "$#" == 0 ]]; then
    set -- '-h'
    usage
    return 1
  fi
  if [[ "${INCLUDE_BASE_CM:-}" == true ]]; then
    load_base_cm
  fi
  setup_cm "$@"
}

trap on_exit EXIT

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  main "$@"
  exit $?
fi
