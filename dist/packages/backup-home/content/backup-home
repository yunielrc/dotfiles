#!/usr/bin/env bash
# shellcheck disable=SC2153
[ "$FLOCKER" != "$0" ] && exec env FLOCKER="$0" flock -E 3 -en "$0" "$0" "$@" || :

set -euEo pipefail

# Constants
# readonly BASE_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly SCRIPT_NAME="$(basename "${0}")"
readonly WORK_DIR="${WORK_DIR:-"$(realpath ~/)"}"
readonly ENV_FILE="${WORK_DIR}/.${SCRIPT_NAME}.env"
readonly LOG_FILE="${WORK_DIR}/.${SCRIPT_NAME}.log"

cd "$WORK_DIR"
# Environment
# MOUNT_SOURCE='192.168.1.4:/nfs/PCBackup'
# BACKUP_TARGET=~/Backup
# EXCLUDE_FOLDERS="folder1,folder2,folder with spaces,foldern"
if [[ -f "$ENV_FILE" ]]; then
  set -o allexport
  . "$ENV_FILE"
  set +o allexport
fi

#
# MOUNT NFS DEVICE
#
mount_nfs_device() {
  local -r mount_source="$1"
  local -r mount_target="$2"

  if ! findmnt --types nfs --source "$mount_source" --target "$mount_target" > /dev/null; then
    [[ ! -d "$mount_target" ]] && mkdir --verbose --parents "$mount_target"
    sudo mount -t nfs "$mount_source" "$mount_target"
  fi
  return 0
}

#
# RESTORE A BACKUP
#
restore_home_backup() {
  local -r backup_target="$1"

  rsync -avz "$backup_target"/* "$WORK_DIR" --log-file "$LOG_FILE"
  return 0
}

#
# MAKE A BACKUP
#
make_home_backup() {
  local -r backup_target="$1"
  local -r exclude_folders="${2:-}" # d1,d2 w space,d3

  local exclude_params="-not -name ${WORK_DIR##*/} "
  # if backup_target is inside work_dir exclude it from backup
  if [[ "$WORK_DIR" == "${backup_target%/*}" ]]; then
    exclude_params="${exclude_params} -not -name ${backup_target##*/} "
  fi
  local -r ifs_copy="$IFS"
  IFS=','
  for f in $exclude_folders; do
    f="${f%%' '}"
    f="${f##' '}"
    exclude_params="${exclude_params} -not -name '${f}'"
  done
  IFS="$ifs_copy"
  readonly exclude_params

  eval find "$WORK_DIR" -maxdepth 1 \
    -type d \
    -not -path "'*/\.*'" \
    "$exclude_params" \
    -exec \
    "rsync -avz --delete {} '${backup_target}' --log-file '$LOG_FILE' \;"
  return 0
}

usage(){

cat <<HELPMSG
Make/restore a backup of user home directories to/from a nfs unit.

Environment variables are loaded from ${ENV_FILE}
Logs are saved to ${LOG_FILE}

Usage:
${SCRIPT_NAME} [OPTIONS] COMMAND

Environment:
  MOUNT_SOURCE        Define the mount source
                      example: '192.168.1.4:/nfs/PCBackup'
  BACKUP_TARGET       Define the mount target, this is the backup dest
                      example: ~/Backup
  EXCLUDE_FOLDERS     Command separated list of excluded folders from backup
                      example: 'snap, VirtualBox VMs, vboxshare'

Options:
  -h, --help          Show this help
  --no-mount-nfs      Ignore MOUNT_SOURCE, and don't mount nfs unit, use
                      local filesystem for backup
Commands:
  backup              Make a backup of home directories 'BACKUP_TARGET'
  restore             Restore a backup from 'BACKUP_TARGET' to user home

Examples:
${SCRIPT_NAME} backup
${SCRIPT_NAME} restore

Exit status:
0: Ok
>= 1: Error
HELPMSG
}


main(){

  [[ "$#" == 0 ]] && set -- '-h'

  local no_mount_nfs=false
  local positional=()

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        usage
        exit 0
      ;;
      -n|--no-mount-nfs)
        no_mount_nfs=true
        shift
      ;;
      *) # unknown flag/switch
      positional+=("$1")
      shift
      ;;
    esac
  done

  set -- "${positional[@]}" # restore positional params

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      backup)
        [[ $no_mount_nfs ]] || mount_nfs_device "$MOUNT_SOURCE" "$BACKUP_TARGET"
        make_home_backup "$BACKUP_TARGET" "${EXCLUDE_FOLDERS:-}"
        exit $?
      ;;
      restore)
        [[ $no_mount_nfs ]] || mount_nfs_device "$MOUNT_SOURCE" "$BACKUP_TARGET"
        restore_home_backup "$BACKUP_TARGET"
        exit $?
      ;;
      *)
        echo -e "Invalid param: ${1}\n" >&2
        usage
        exit 13
      ;;
    esac
  done
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  main "$@"
  exit $?
fi
