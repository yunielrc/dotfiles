#!/usr/bin/env bash
#
# GPG Secure Key Backup
#
# Export/Restore private key, public key and ownertrust to/from a file with symmetric encryption.
#
# set -x
set -euEo pipefail

# Constants
readonly SCRIPT_NAME="$(basename "${0}")"
readonly ETC_DIR="${ETC_DIR:-"$(realpath ~/)"}"
readonly ENV_FILE="${ETC_DIR}/.${SCRIPT_NAME}.env"
readonly WORK_DIR="${WORK_DIR:-"$PWD"}" && cd "$WORK_DIR"
readonly TMP_DIR="/dev/shm/$(uuidgen)" && mkdir "$TMP_DIR"

readonly PUBLIC_KEY=public_key.asc
readonly PRIVATE_KEY=private_key.asc
readonly OWNERTRUST=ownertrust


# Config

if [[ -f "$ENV_FILE" ]]; then
  set -o allexport
  . "$ENV_FILE"
  set +o allexport
fi


# Functions

gpgtar_symmetric_encrypt() {
  local -r output="$1"
  local -r directory="$2"

  if [[ -z "${TEST_PASSPHRASE:-}" ]]; then
    gpgtar --output "$output" --symmetric "$directory"
  else
    gpgtar --output "$output" --symmetric --gpg-args "--batch --passphrase ${TEST_PASSPHRASE}" "$directory"
  fi
}

[[ "${ENV:-}" == testing && "$(type -t backup)" == function ]] || { # for mocking
  backup() {
    local -r recipient="$1"
    local -r backup_file="$2"

    (
      cd "$TMP_DIR"
      gpg --armor --export "$recipient" >"$PUBLIC_KEY"
      gpg --armor --export-secret-keys "$recipient" >"$PRIVATE_KEY"
      gpg --export-ownertrust >"$OWNERTRUST"

      gpgtar_symmetric_encrypt gpg-backup.gpg .
    )
    mv "${TMP_DIR}/gpg-backup.gpg" "$backup_file"
  }
}

backup_parse_args() {

  local recipient
  local backup_file

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage_backup
      return 0
      ;;
    -r | --recipient)
      shift
      recipient="$1"
      shift
      ;;
    *)
      backup_file="$1"
      shift
      ;;
    esac
  done

  : "${recipient:="$GPG_RECIPIENT"}"
  : "${backup_file:="gpg-backup-$(printf '%(%Y%m%d%H%M%S)T').gpg"}"

  backup "$recipient" "$backup_file"
}

usage_backup() {
  cat <<-HELPMSG
Usage:
${SCRIPT_NAME} backup [OPTIONS] [backup_file]

Make a backup, export private key, public key and ownertrust to a file with symmetric encryption.

Options:
  -h, --help                  Show this help
  -r user, --recipient user   Encrypt for user id user. For details see gpg

Environment:
  GPG_RECIPIENT               Id user. For details see gpg.

Examples:
\$ ${SCRIPT_NAME} backup -r user mybackup.gpg

HELPMSG
}

gpgtar_symmetric_decrypt() {
  local -r encrypted_file="$1"

  if [[ -z "${TEST_PASSPHRASE:-}" ]]; then
    gpgtar --decrypt --directory . "$encrypted_file"
  else
    gpgtar --decrypt --directory . --gpg-args "--batch --passphrase ${TEST_PASSPHRASE}" "$encrypted_file"
  fi
}

[[ "${ENV:-}" == testing && "$(type -t restore)" == function ]] || { # for mocking
  restore() {
    local -r backup_file="$(realpath "$1")"

    (
      cd "$TMP_DIR"
      gpgtar_symmetric_decrypt "$backup_file"

      gpg --import "$PUBLIC_KEY"
      gpg --import "$PRIVATE_KEY"
      gpg --import-ownertrust "$OWNERTRUST"
    )
  }
}

restore_parse_args() {

  local backup_file

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage_restore
      return 0
      ;;
    *)
      backup_file="$1"
      shift
      ;;
    esac
  done

  restore "$backup_file"
}

usage_restore() {
  cat <<-HELPMSG
Usage:
${SCRIPT_NAME} restore [OPTIONS] [backup_file]

Restore backup, import private key, public key and ownertrust from a file with symmetric encryption.

Options:
  -h, --help                  Show this help

Examples:
\$ ${SCRIPT_NAME} restore mybackup.gpg

HELPMSG
}

usage() {
  cat <<-HELPMSG
Usage:
${SCRIPT_NAME} [OPTIONS] COMMAND

Backup/Restore private key, public key and ownertrust to/from a file with symmetric encryption.
Environment variables are loaded from '${ENV_FILE}'.

Options:
  -h, --help                Show this help

Commands:
  backup                    Make a backup of home directories 'BACKUP_TARGET'
  restore                   Restore a backup from 'BACKUP_TARGET' to user home

Run '${SCRIPT_NAME} COMMAND --help' for more information on a command.

HELPMSG
}

on_exit() {
  # shellcheck disable=SC2181
  if [[ $? != 0 ]]; then
    echo
    usage
  fi
  rm --recursive "$TMP_DIR"
}
trap on_exit INT TERM EXIT

main() {
  [[ $# == 0 ]] && set -- '-h'

  while [[ $# -gt 0 ]]; do
    case "$1" in
    -h | --help)
      usage
      return 0
      ;;
    backup)
      shift
      backup_parse_args "$@"
      return $?
      ;;
    restore)
      shift
      restore_parse_args "$@"
      return $?
      ;;
    *)
      echo -e "Invalid parameter: ${1}\n" >&2
      usage
      return 10
      ;;
    esac
  done
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  main "$@"
  exit $?
fi
